basePath: /
definitions:
  alvax.Channel:
    properties:
      baseUrl:
        type: string
      botToken:
        type: string
      commands:
        items:
          $ref: '#/definitions/alvax.Command'
        type: array
      defaultGroupId:
        type: integer
      githubGroupId:
        type: integer
      integrate:
        type: boolean
      memeMode:
        type: boolean
      methods:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      prodWebhook:
        type: string
      token:
        type: string
      username:
        type: string
      wehbookEndpoint:
        type: string
      wehbookUrl:
        type: string
    type: object
  alvax.Command:
    properties:
      description:
        type: string
      fullName:
        type: string
      name:
        type: string
      parameters:
        items:
          type: string
        type: array
    type: object
  alvax.ConfigRoot:
    properties:
      channels:
        additionalProperties:
          $ref: '#/definitions/alvax.Channel'
        type: object
      docker:
        $ref: '#/definitions/alvax.Docker'
      key:
        type: string
      ngrok:
        $ref: '#/definitions/alvax.Ngrok'
      server:
        $ref: '#/definitions/alvax.Server'
    type: object
  alvax.Docker:
    properties:
      host:
        type: string
    type: object
  alvax.Ngrok:
    properties:
      tunnelsUrl:
        type: string
    type: object
  alvax.Server:
    properties:
      port:
        type: integer
    type: object
  backups.Backup:
    properties:
      active:
        description: Boolean indicating if the service is to be backuped.
        type: boolean
      backup_size:
        description: Size of the gzip/tar archive.
        type: string
      description:
        description: More verbose description of such service backup.
        type: string
      executor_url:
        description: Dumping script, git URL.
        type: string
      file_destination:
        description: Path to the file on destination machine.
        type: string
      file_name:
        description: Name of the compressed backup file.
        type: string
      last_status:
        default: unknown
        description: Last status string of such backup (e.g. success, failure).
        type: string
      service_name:
        description: Backuped service name -- unique identifier.
        type: string
      timestamp:
        description: UNIX timestamp of the last provided backup.
        type: integer
    required:
    - service_name
    type: object
  business.Business:
    properties:
      contact:
        description: Array of contacts of different type.
        items:
          $ref: '#/definitions/business.Contact'
        type: array
      ico:
        description: Czech Company ICO/ID number.
        type: integer
      id:
        description: Business' unique identifier.
        type: string
      name_label:
        description: Company's business name.
        type: string
      role:
        description: Business role to such organization (e.g. partner, owner)
        type: string
      username:
        description: User's name linked to such business.
        type: string
      vat_id:
        description: Czech company DICO/VAT ID number/string.
        type: string
    required:
    - id
    type: object
  business.Contact:
    properties:
      content:
        description: Contact field contents.
        type: string
      type:
        description: Type of contact field (e.g. e-mail address, street address, telephone
          number etc).
        type: string
    type: object
  depots.DepotItem:
    properties:
      depot:
        description: Location name of such Item.
        type: string
      desc:
        description: Item description, name, amount, type etc.
        type: string
      id:
        description: Numeric unique ID of such Item.
        type: integer
      misc:
        description: More information, e.g. the more precise location specification.
        type: string
      owner_name:
        description: Owner name according to users package.
        type: string
    type: object
  dish.Incident:
    properties:
      comment:
        description: Other commentary to the incident.
        type: string
      desc:
        description: Further details about the incident like place, state of operation
          etc.
        type: string
      end_date:
        description: Estimated end of incident handling/resolving.
        type: integer
      id:
        description: Incident ID, stringified timestamp usually.
        type: string
      name:
        description: Incident name.
        type: string
      public:
        description: Public indicates the state of visibility for all.
        type: boolean
      reason:
        description: Reason of the incident that happened.
        type: string
      socket_id:
        description: |-
          ID of the referencing socket(s).
          SocketID []string `json:"socket_id"`
        type: string
      start_date:
        description: The very start datetime of such incident.
        type: integer
    type: object
  dish.Message:
    properties:
      content:
        type: string
      socket_list:
        items:
          type: string
        type: array
      timestamp:
        type: integer
    type: object
  dish.Root:
    properties:
      incidents:
        additionalProperties:
          $ref: '#/definitions/dish.Incident'
        type: object
      sockets:
        additionalProperties:
          $ref: '#/definitions/dish.Socket'
        type: object
    type: object
  dish.Socket:
    properties:
      dish_target:
        description: |-
          DishTarget is a string array, usually containing dish's host short name (e.g. frank).
          To be referred as /dish/sockets/frank for example.
        items:
          type: string
        type: array
      expected_http_code_array:
        description: If the Host is HTTP/S endpoint, one can specify which HTTP Result/Response
          codes are okay and not to alert upon.
        items:
          type: integer
        type: array
      fail_count:
        description: FailCount indicates how many times socket has to be in failed
          state before alerting.
        type: integer
      healthy:
        description: Healthy boolean indicates wheter is socket okay, or the way around.
        type: boolean
      host_name:
        description: Hostname (server.random.com) or HTTP/S URI (https://endpoint.space).
        type: string
      maintenance:
        description: Maintenance boolean states for the M. mode being applied to such
          socket/endpoint.
        type: boolean
      muted:
        description: Muted bool indicates that the socket is not propagated to any
          dish if true.
        type: boolean
      muted_from:
        description: MutedFrom UNIX timestamp.
        type: integer
      path_http:
        description: PathHTTP is any URL the site is about to be tested on, e.g. /dish/sockets
        type: string
      port_tcp:
        description: |-
          Socket TCP port part
          Even default port 80 should be added here.
        type: integer
      public:
        description: Public boolean tells the frontendee to show itself.
        type: boolean
      response_time:
        description: ResponseTime is the time for the request to be processed.
        type: number
      socket_description:
        description: More verbose name/description of the socket.
        type: string
      socket_id:
        description: Socket ID, snake_cased for socket editing and deleting.
        type: string
      socket_name:
        description: GEneric name of the socket, to be used in dish results as failed
          one endpoint for example.
        type: string
      test_timestamp:
        description: TestTimestamp tells the time of the last socket testing being
          executed upon.
        type: integer
    required:
    - host_name
    - port_tcp
    - socket_id
    type: object
  finance.Account:
    properties:
      account_currency:
        description: Account currency name (e.g. CZK, GBP, EUR, USD)
        type: string
      account_description:
        description: Account more verbose name.
        type: string
      account_iban:
        description: Account IBAN code for international payments.
        type: string
      account_id:
        description: Account unique ID, snake_cased identifier.
        type: string
      account_number:
        description: Account number.
        type: string
      account_owner:
        description: Owner's name/username to link account to.
        type: string
      account_swift_bic:
        description: Account SWIFT/BIC code for international payments.
        type: string
      bank_code:
        description: |-
          Universal in-state bank code (CZ mainly).
          Bank codes such as "0100" would be invalid as type int!
        type: string
    required:
    - account_iban
    - account_id
    - account_number
    - account_swift_bic
    type: object
  finance.Item:
    properties:
      account_id:
        description: Referencing finance account.
        type: string
      amount:
        description: Payment amount in defined currency (often the account's currency).
        type: number
      business_id:
        description: BusinessID is a reference to 'business' package.
        type: string
      currency:
        description: Payment currency name (e.g. CZK, GBP, EUR, USD).
        type: string
      description:
        description: Payment/item description.
        type: string
      id:
        description: Item unique ID (e.g. datetime timestamp plus currency etc).
        type: string
      invoice_no:
        description: Invoice identification.
        type: string
      misc:
        description: Mescellaneous information about the payment (e.g. foreign currency
          and amount).
        type: string
      payment_date:
        description: PaymentDate is a datetime of the payment.
        type: string
      type:
        description: Type defines whether the item is an income, or an expense.
        type: string
    required:
    - account_id
    - amount
    - currency
    - id
    - payment_date
    - type
    type: object
  finance.Tax:
    properties:
      base_sum:
        description: Difference between incomes and expenses. Base for income tax.
        type: number
      expense_total:
        description: Sum of expenses.
        type: number
      income_tax_estimation_60:
        description: Weighted estimation of the income tax, where 60% of income are
          meant as expenses.
        type: number
      income_tax_estimation_abs:
        description: Absolute estimation of the income tax per year, from given totals.
        type: number
      income_total:
        description: Sum of incomes.
        type: number
    type: object
  infra.Configuration:
    properties:
      ansible_host:
        description: ansible root vars
        type: string
      ansible_user:
        type: string
      asterisk_present:
        type: boolean
      base_description:
        type: string
      base_motd:
        description: |-
          base role
          https://www.patorjk.com/software/taag/#p=display&f=ANSI%20Regular&t=stokrle
        type: string
      become:
        type: boolean
      become_user:
        type: string
      bind_exporter_present:
        description: metrics role
        type: boolean
      dc:
        type: string
      dialin_present:
        description: dialin-nas role
        type: boolean
      disk1:
        type: string
      disk2:
        type: string
      disk3:
        type: string
      disk4:
        type: string
      dns_master_ip:
        type: string
      dns_server_present:
        description: dns role
        type: boolean
      dns_server_type:
        type: string
      dns_slave_ip:
        type: string
      domain:
        type: string
      golang_version:
        type: string
      grafana_container_name:
        type: string
      grafana_docker_tag_version:
        type: string
      grafana_docker_volume_name:
        type: string
      grafana_present:
        type: boolean
      grafana_webui_url:
        type: string
      has_tls:
        type: boolean
      install_k8s_control_node:
        description: container role
        type: boolean
      install_k8s_worker_node:
        type: boolean
      is_behind_cloudflare:
        description: proxy role
        type: boolean
      is_cdn:
        type: boolean
      is_edge_relay:
        type: boolean
      is_hypervisor:
        description: hyp vars
        type: boolean
      is_relay:
        type: boolean
      is_wireguarded:
        description: net role
        type: boolean
      kpu_present:
        description: kpu role
        type: boolean
      loki_image_tag:
        type: string
      loki_port:
        type: integer
      loki_present:
        type: boolean
      loki_url:
        default: loki.savla.su
        type: string
      nameserver_primary:
        type: string
      nameserver_secondary:
        type: string
      nginx_present:
        type: boolean
      postfix_myhostname:
        description: postfix role
        type: string
      postfix_smtpd_banner:
        type: string
      private_cidr:
        type: integer
      private_gateway:
        type: string
      private_ip:
        type: string
      private_netmask:
        type: string
      private_network:
        type: string
      prometheus_config_dir:
        type: string
      prometheus_container_name:
        type: string
      prometheus_docker_volume_name:
        type: string
      prometheus_image_tag:
        type: string
      prometheus_present:
        type: boolean
      prometheus_webui_url:
        type: string
      promtail_present:
        type: boolean
      public_ip:
        type: string
      raid:
        type: boolean
      remote_host_ip_address:
        default: 10.4.5.130
        description: backup role
        type: string
      runner_action:
        type: string
      runner_config_labels:
        type: string
      runner_config_name:
        type: string
      runner_config_token:
        type: string
      runner_group:
        type: string
      runner_present:
        description: ghar role
        type: boolean
      runner_user:
        type: string
      runner_version:
        type: string
      setup_ipsec:
        type: boolean
      traefik_docker_container_name:
        type: string
      traefik_docker_network_name:
        type: string
      traefik_docker_tag_version:
        type: string
      traefik_present:
        type: boolean
      traefik_webui_external_port:
        type: integer
      traefik_webui_url:
        type: string
      use_geoip:
        type: boolean
    type: object
  infra.Domain:
    properties:
      cf_zone_id:
        description: Cloudflare Zone ID
        type: string
      domain_fqdn:
        description: Fully qualified domain name.
        type: string
      domain_id:
        description: Unique domain identifier.
        type: string
      domain_owner:
        description: Domain's owner (user)name.
        type: string
      expiration_date:
        description: Domain's expiration date
        type: string
      private_details:
        description: Private details (e.g. addresses, phone number etc in WHOIS)
        type: boolean
      registrar_name:
        description: Name of the current registrar
        type: string
    type: object
  infra.Facts:
    properties:
      is_virtual:
        type: boolean
      kernel_version:
        type: string
      memory_total_bytes:
        type: integer
      memory_used_bytes:
        type: integer
      net_domain:
        type: string
      net_fqdn:
        type: string
      net_hostname:
        type: string
      net_primary_ip:
        type: string
      net_primary_network:
        type: string
      os_arch:
        type: string
      os_family:
        type: string
      os_selinux_enabled:
        type: boolean
      proc_count:
        type: integer
      system_uptime_sec:
        type: integer
      timestamp:
        type: integer
      timezone:
        type: string
    type: object
  infra.Host:
    properties:
      children:
        description: Children of such machine -- should use machines' hashes for proper
          linking.
        items:
          type: string
        type: array
      children_configs:
        items:
          $ref: '#/definitions/infra.VMInstallConfig'
        type: array
      configuration:
        allOf:
        - $ref: '#/definitions/infra.Configuration'
        description: Configuration system variables.
      datacentre:
        description: Datacentre is the physical locality of such machine.
        type: string
      description:
        description: Brief node's description -- shown in node's MOTD on remote login.
        type: string
      domain:
        description: Host's default domain name (e.g. savla.su as internal domain
          name).
        type: string
      expires_at:
        description: EpiresAt is a time of the expiration of such hosting service.
        type: string
      facts:
        allOf:
        - $ref: '#/definitions/infra.Facts'
        description: Exported system facts from facter.
      hostname_fqdn:
        description: Node hostname as FQDN-formatted.
        type: string
      hostname_short:
        description: Node hostname without its domain.
        type: string
      id:
        description: Unique hash/ID to link to such host record.
        type: string
      ip_address:
        description: Important network-related IP addresses to be assigned to such
          host (e.g. public interface address, wireguard interface address etc).
        items:
          type: string
        type: array
      provider:
        description: Provider is the name of the hosting company of such machine.
        type: string
      roles:
        description: Ansible roles to be applied to such host.
        items:
          type: string
        type: array
      wireguarded:
        description: Wireguarded bool indicates that the host is part of the core
          network.
        type: boolean
    required:
    - hostname_fqdn
    - hostname_short
    - id
    type: object
  infra.Infrastructure:
    properties:
      domains:
        description: Domains linked to such infrastructure.
        items:
          $ref: '#/definitions/infra.Domain'
        type: array
      hosts:
        description: Hosts/nodes linked to such infrastructure.
        items:
          $ref: '#/definitions/infra.Host'
        type: array
      networks:
        description: Networks linked to such infrastructure.
        items:
          $ref: '#/definitions/infra.Network'
        type: array
    type: object
  infra.Network:
    properties:
      hash:
        description: Unique network's identifier
        type: string
      interface:
        description: Interface(s) of such network.
        type: string
      network_address:
        description: Network IP address.
        type: string
      network_cidr_block:
        description: CIDR block of netmask.
        type: string
      network_name:
        description: Network name, verbose ID.
        type: string
    type: object
  infra.VMInstallConfig:
    properties:
      autostart:
        type: boolean
      baseos_repo:
        type: string
      bridge_name:
        type: string
      console_alias:
        default: serial0
        type: string
      console_type:
        default: pty
        type: string
      disk_alias:
        type: string
      disk_bus:
        default: virtio
        type: string
      disk_source:
        type: string
      disk_type:
        default: raw
        type: string
      hostname_fqdn:
        type: string
      ipv4_address:
        type: string
      ipv4_dns:
        type: string
      ipv4_gateway:
        type: string
      ipv4_netmask:
        type: string
      lock_root:
        type: boolean
      locname:
        type: string
      memory_size:
        type: integer
      memory_unit:
        default: MB
        type: string
      name:
        type: string
      network_name:
        type: string
      os_type:
        default: linux
        type: string
      os_veriant:
        type: string
      state:
        default: absent
        type: string
      timezone:
        default: Europe/Vienna
        type: string
      vcpu_count:
        type: integer
      virt_type:
        default: kvm
        type: string
      xml_filename:
        type: string
    type: object
  links.Link:
    properties:
      active:
        description: Link's activated status.
        type: boolean
      description:
        description: Link's more verbose name/description.
        type: string
      name:
        description: Link's name/placeholder, used as an unique key.
        type: string
      url:
        description: Link's URL to link to.
        type: string
    required:
    - name
    - url
    type: object
  news.Item:
    properties:
      link:
        description: Link to such item -- to the actual article usually.
        type: string
      parse_date_rfc1123z:
        description: Special date of issue format to reparse/order all news items
          altogether.
        type: string
      perex:
        description: Item's short description (perex).
        type: string
      pub_date:
        description: Date of issue, formatted by issuer.
        type: string
      server:
        description: Issuer server name (hostname with subdomain).
        type: string
      title:
        description: Item's title (headline).
        type: string
    type: object
  news.NewsSources:
    properties:
      user_sources:
        items:
          $ref: '#/definitions/news.UserSource'
        type: array
    type: object
  news.Source:
    properties:
      source_id:
        description: Source unique identificator.
        type: string
      source_name:
        description: Source's more natural name.
        type: string
      source_url:
        description: RSS URL to the source.
        type: string
    type: object
  news.UserSource:
    properties:
      news_sources:
        description: Actual user's news sources.
        items:
          $ref: '#/definitions/news.Source'
        type: array
      user_name:
        description: News sources linked username.
        type: string
    type: object
  projects.Project:
    properties:
      backuped:
        description: Projects backuped boolean.
        type: boolean
      kanban_link:
        description: URL to kanboard/kanban project's page.
        type: string
      project_deploy_target:
        description: Target internal node of deployment.
        type: string
      project_desc:
        description: Brief project description.
        type: string
      project_docs_link:
        description: URL to documentation page(s).
        type: string
      project_id:
        description: Project's unique identificator.
        type: string
      project_manager:
        description: Project manager's name/username.
        type: string
      project_name:
        description: Project name.
        type: string
      project_published:
        description: Published boolean.
        type: boolean
      project_repo:
        description: Git repository link (not URL, without HTTP scheme).
        type: string
      project_url:
        description: URL to base page of the project (project's URL).
        type: string
      redmine_link:
        description: URL to redmine project overview.
        type: string
    required:
    - project_id
    - project_name
    type: object
  roles.Role:
    properties:
      active:
        description: Role status, by default it is inactive.
        type: boolean
      administrator:
        description: Basic Access-Control List field.
        type: boolean
      description:
        description: Role description to make more sense when listing those.
        type: string
      name:
        description: Role name is its unique description, acts like an ID too.
        type: string
    required:
    - name
    type: object
  users.User:
    properties:
      ACL:
        description: Access Control List. List of swapi modules to be accessed.
        items:
          type: string
        type: array
      active:
        description: |-
          Presence/Absence boolean. If false, one is not allowed to log-in (token is rejected),
          to interract with savla-dev infra in general (by default).
        type: boolean
      country:
        description: Country of origin -- to help maintain global contacts.
        type: string
      discord_username:
        description: Discord account/profile name.
        type: string
      email_alias:
        description: Email alias in cloudflare email routing
        type: string
      email_main:
        description: Email address main, personal
        type: string
      full_name:
        description: Full Name of such user.
        type: string
      gdpr_consent:
        description: |-
          Important GDPR consent boolean -- if false, user's details should be omitted!
          SEE more -- https://gdpr.eu/checklist/
        type: boolean
      github_username:
        description: GitHub account/profile name (used for SSH public keys importing).
        type: string
      gpg_keys:
        description: User's GPG public keys array.
        items:
          type: string
        type: array
      name:
        description: ID not used anymore as indexing is used differently now (searching
          by Name, index respects array implicit property).
        type: string
      roles:
        description: |-
          User's given roles -- a role labels array.
          Roles []roles.Role `json:"roles"`
        items:
          type: string
        type: array
      spotify_link:
        description: Spotify link to one's profile.
        type: string
      ssh_keys:
        description: User's SSH public keys array.
        items:
          type: string
        type: array
      token_hmac:
        description: Unique token used for auth purposes, SHA512 preferred.
        type: string
      wireguard_vpn:
        description: All Wireguard config objects -- an array.
        items:
          $ref: '#/definitions/users.Wireguard'
        type: array
    required:
    - name
    type: object
  users.Wireguard:
    properties:
      allowed_ips:
        description: Allowed IP address(es) list on the side of server (vpn_gateway_server).
        items:
          type: string
        type: array
      device_name:
        description: Unique device name (for such user).
        type: string
      ip_address:
        description: User's private IP address.
        type: string
      permission:
        description: Is the user given permission to dial a connection?
        type: boolean
      private_key:
        description: |-
          Wireguard private key.
          TODO: should be encrypted?
        type: string
      public_key:
        description: Wireguard public key.
        type: string
    type: object
host: swis-api-run-prod:8050
info:
  contact:
    email: krusty@savla.dev
    name: API Support
    url: http://savla.dev/swapi
  description: sakalWeb Information System v5 RESTful API documentation
  license:
    name: MIT
    url: https://github.com/savla-dev/swis-api/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: swis-api (swapi) v5
  version: 5.13.28
paths:
  /alvax:
    get:
      description: get alvax config list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/alvax.ConfigRoot'
            type: array
      summary: Get all alvax configs
      tags:
      - alvax
  /alvax/{key}:
    delete:
      description: delete alvax config by its key
      parameters:
      - description: alvax config key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alvax.ConfigRoot'
      summary: Delete alvax config by its key
      tags:
      - alvax
    get:
      description: get alvax config by key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alvax.ConfigRoot'
      summary: Get alvax config by key
      tags:
      - alvax
    post:
      description: add new alvax config
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/alvax.ConfigRoot'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alvax.ConfigRoot'
      summary: Add new alvax config
      tags:
      - alvax
    put:
      description: update alvax config by its ID
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/alvax.ConfigRoot'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/alvax.ConfigRoot'
      summary: Update alvax config by its ID
      tags:
      - alvax
  /alvax/restore:
    post:
      consumes:
      - application/json
      description: upload alvax config JSON dump and restore the data model
      produces:
      - application/json
      responses: {}
      summary: Upload alvax configs dump -- restore configs
      tags:
      - alvax
  /backups:
    get:
      description: get backed up services
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Get all backed up services
      tags:
      - backups
  /backups/{key}:
    delete:
      description: delete backup service by its key
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Delete backup service by its key
      tags:
      - backups
    get:
      description: get backup status by project'S/service's key
      parameters:
      - description: backup service key
        in: path
        name: host
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Get backup status by project's/service's key
      tags:
      - backups
    post:
      description: add new backed up service
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/backups.Backup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/backups.Backup'
      summary: Add new backed up serivce
      tags:
      - backups
    put:
      description: update backup status by service's key
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/backups.Backup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/backups.Backup'
      summary: Update backup status by service's key
      tags:
      - backups
  /backups/{key}/active:
    put:
      description: active/inactive backup toggle by its key
      parameters:
      - description: service key
        in: path
        name: service_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/backups.Backup'
      summary: Acitive/inactive backup toggle by its key
      tags:
      - backups
  /backups/restore:
    post:
      consumes:
      - application/json
      description: upload backups JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload backups dump backup -- restores all backup services
      tags:
      - backups
  /business:
    get:
      description: get business entities list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/business.Business'
            type: array
      summary: Get all business entities
      tags:
      - business
  /business/{key}:
    delete:
      description: delete business by its key
      parameters:
      - description: business ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/business.Business'
      summary: Delete business by its key
      tags:
      - business
    get:
      description: get business by key param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/business.Business'
      summary: Get business entity by its key
      tags:
      - business
    post:
      description: add new business entity
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/business.Business'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/business.Business'
      summary: Add new business entity
      tags:
      - business
    put:
      description: update business entity by its key
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/business.Business'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/business.Business'
      summary: Update business entity by its key
      tags:
      - business
  /business/restore:
    post:
      consumes:
      - application/json
      description: upload business JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload business dump backup -- restores all business entities
      tags:
      - business
  /depots:
    get:
      description: get depot complete list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/depots.DepotItem'
            type: array
      summary: Get all depots and their users/owners
      tags:
      - depots
  /depots/items/{key}:
    delete:
      description: delete depot item by its key
      parameters:
      - description: depot key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/depots.DepotItem'
      summary: Delete depot item by its key
      tags:
      - depots
    get:
      description: get depot item's details by :key route param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/depots.DepotItem'
      summary: Get depot item by key
      tags:
      - depots
    post:
      description: add new depot item
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/depots.DepotItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/depots.DepotItem'
      summary: Add new depot item
      tags:
      - depots
    put:
      description: update depot by its key
      parameters:
      - description: depot key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/depots.DepotItem'
      summary: Update depot item by its key
      tags:
      - depots
  /depots/items/owner/{owner}:
    get:
      description: get depot item list by :owner param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/depots.DepotItem'
            type: array
      summary: Get depot item list by Owner
      tags:
      - depots
  /depots/restore:
    post:
      consumes:
      - application/json
      description: upload depots JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload depot dump backup -- restores all depot items
      tags:
      - depots
  /dish:
    get:
      consumes:
      - application/json
      description: get all root items
      parameters:
      - description: Other commentary to the incident.
        in: query
        name: comment
        type: string
      - description: Further details about the incident like place, state of operation
          etc.
        in: query
        name: desc
        type: string
      - description: Estimated end of incident handling/resolving.
        in: query
        name: end_date
        type: integer
      - description: Incident ID, stringified timestamp usually.
        in: query
        name: id
        type: string
      - description: Incident name.
        in: query
        name: name
        type: string
      - description: Public indicates the state of visibility for all.
        in: query
        name: public
        type: boolean
      - description: Reason of the incident that happened.
        in: query
        name: reason
        type: string
      - description: |-
          ID of the referencing socket(s).
          SocketID []string `json:"socket_id"`
        in: query
        name: socket_id
        type: string
      - description: The very start datetime of such incident.
        in: query
        name: start_date
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.Root'
      summary: Get all root items
      tags:
      - dish
  /dish/incidents:
    get:
      consumes:
      - application/json
      description: get all incidents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.Incident'
            type: array
      summary: Get all incidents
      tags:
      - dish
    post:
      consumes:
      - application/json
      description: add new incident
      parameters:
      - description: Other commentary to the incident.
        in: query
        name: comment
        type: string
      - description: Further details about the incident like place, state of operation
          etc.
        in: query
        name: desc
        type: string
      - description: Estimated end of incident handling/resolving.
        in: query
        name: end_date
        type: integer
      - description: Incident ID, stringified timestamp usually.
        in: query
        name: id
        type: string
      - description: Incident name.
        in: query
        name: name
        type: string
      - description: Public indicates the state of visibility for all.
        in: query
        name: public
        type: boolean
      - description: Reason of the incident that happened.
        in: query
        name: reason
        type: string
      - description: |-
          ID of the referencing socket(s).
          SocketID []string `json:"socket_id"`
        in: query
        name: socket_id
        type: string
      - description: The very start datetime of such incident.
        in: query
        name: start_date
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dish.Incident'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dish.Incident'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dish.Incident'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dish.Incident'
      summary: Add new incident
      tags:
      - dish
  /dish/incidents/{key}:
    delete:
      consumes:
      - application/json
      description: delete incident by its key
      parameters:
      - description: Other commentary to the incident.
        in: query
        name: comment
        type: string
      - description: Further details about the incident like place, state of operation
          etc.
        in: query
        name: desc
        type: string
      - description: Estimated end of incident handling/resolving.
        in: query
        name: end_date
        type: integer
      - description: Incident ID, stringified timestamp usually.
        in: query
        name: id
        type: string
      - description: Incident name.
        in: query
        name: name
        type: string
      - description: Public indicates the state of visibility for all.
        in: query
        name: public
        type: boolean
      - description: Reason of the incident that happened.
        in: query
        name: reason
        type: string
      - description: |-
          ID of the referencing socket(s).
          SocketID []string `json:"socket_id"`
        in: query
        name: socket_id
        type: string
      - description: The very start datetime of such incident.
        in: query
        name: start_date
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.Incident'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dish.Incident'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dish.Incident'
      summary: Delete incident by its key
      tags:
      - dish
    get:
      consumes:
      - application/json
      description: get incident list by socket ID
      parameters:
      - collectionFormat: csv
        description: |-
          DishTarget is a string array, usually containing dish's host short name (e.g. frank).
          To be referred as /dish/sockets/frank for example.
        in: query
        items:
          type: string
        name: dish_target
        type: array
      - collectionFormat: csv
        description: If the Host is HTTP/S endpoint, one can specify which HTTP Result/Response
          codes are okay and not to alert upon.
        in: query
        items:
          type: integer
        name: expected_http_code_array
        type: array
      - description: FailCount indicates how many times socket has to be in failed
          state before alerting.
        in: query
        name: fail_count
        type: integer
      - description: Healthy boolean indicates wheter is socket okay, or the way around.
        in: query
        name: healthy
        type: boolean
      - description: Hostname (server.random.com) or HTTP/S URI (https://endpoint.space).
        in: query
        name: host_name
        required: true
        type: string
      - description: Maintenance boolean states for the M. mode being applied to such
          socket/endpoint.
        in: query
        name: maintenance
        type: boolean
      - description: Muted bool indicates that the socket is not propagated to any
          dish if true.
        in: query
        name: muted
        type: boolean
      - description: MutedFrom UNIX timestamp.
        in: query
        name: muted_from
        type: integer
      - description: PathHTTP is any URL the site is about to be tested on, e.g. /dish/sockets
        in: query
        name: path_http
        type: string
      - description: |-
          Socket TCP port part
          Even default port 80 should be added here.
        in: query
        name: port_tcp
        required: true
        type: integer
      - description: Public boolean tells the frontendee to show itself.
        in: query
        name: public
        type: boolean
      - description: ResponseTime is the time for the request to be processed.
        in: query
        name: response_time
        type: number
      - description: More verbose name/description of the socket.
        in: query
        name: socket_description
        type: string
      - description: Socket ID, snake_cased for socket editing and deleting.
        in: query
        name: socket_id
        required: true
        type: string
      - description: GEneric name of the socket, to be used in dish results as failed
          one endpoint for example.
        in: query
        name: socket_name
        type: string
      - description: TestTimestamp tells the time of the last socket testing being
          executed upon.
        in: query
        name: test_timestamp
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.Incident'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dish.Incident'
      summary: Get incident list by socket ID
      tags:
      - dish
    put:
      consumes:
      - application/json
      description: update incident by its key
      parameters:
      - description: Other commentary to the incident.
        in: query
        name: comment
        type: string
      - description: Further details about the incident like place, state of operation
          etc.
        in: query
        name: desc
        type: string
      - description: Estimated end of incident handling/resolving.
        in: query
        name: end_date
        type: integer
      - description: Incident ID, stringified timestamp usually.
        in: query
        name: id
        type: string
      - description: Incident name.
        in: query
        name: name
        type: string
      - description: Public indicates the state of visibility for all.
        in: query
        name: public
        type: boolean
      - description: Reason of the incident that happened.
        in: query
        name: reason
        type: string
      - description: |-
          ID of the referencing socket(s).
          SocketID []string `json:"socket_id"`
        in: query
        name: socket_id
        type: string
      - description: The very start datetime of such incident.
        in: query
        name: start_date
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.Incident'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dish.Incident'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dish.Incident'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dish.Incident'
      summary: Update incident by its key
      tags:
      - dish
  /dish/incidents/global:
    get:
      consumes:
      - application/json
      description: get global incident list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.Incident'
            type: array
      summary: Get global incident list
      tags:
      - dish
  /dish/incidents/public:
    get:
      consumes:
      - application/json
      description: get public incident list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.Incident'
            type: array
      summary: Get public incident list
      tags:
      - dish
  /dish/restore:
    post:
      consumes:
      - application/json
      description: restore dish package items
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/dish.Incident'
            type: array
        "404":
          description: Not Found
          schema:
            items:
              $ref: '#/definitions/dish.Incident'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/dish.Incident'
            type: array
      summary: Restore dish package items
      tags:
      - dish
  /dish/sockets:
    get:
      description: get socket list, socket array
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Get all sockets list
      tags:
      - dish
  /dish/sockets/{host}:
    get:
      description: get socket list by Host
      parameters:
      - description: dish instance name
        in: path
        name: host
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Get socket list by host
      tags:
      - dish
  /dish/sockets/{key}:
    delete:
      description: delete socket by its ID
      parameters:
      - description: dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.Socket'
      summary: Delete socket by its ID
      tags:
      - dish
    post:
      description: add new socket to socket array
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dish.Socket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.Socket'
      summary: Adding new socket to socket array
      tags:
      - dish
    put:
      description: update socket by its ID
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dish.Socket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.Socket'
      summary: Update socket by its ID
      tags:
      - dish
  /dish/sockets/{key}/maintenance:
    put:
      consumes:
      - application/json
      description: toggle maintenance mode
      parameters:
      - description: name socket by key
        in: query
        name: key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.Socket'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dish.Socket'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dish.Socket'
      summary: Toggle maintenance mode
      tags:
      - dish
  /dish/sockets/{key}/mute:
    put:
      consumes:
      - application/json
      description: toggle muted state
      parameters:
      - description: name socket by key
        in: query
        name: key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.Socket'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dish.Socket'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dish.Socket'
      summary: Toggle muted state
      tags:
      - dish
  /dish/sockets/{key}/public:
    put:
      consumes:
      - application/json
      description: toggle public state
      parameters:
      - description: name socket by key
        in: query
        name: key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.Socket'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dish.Socket'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dish.Socket'
      summary: Toggle public state
      tags:
      - dish
  /dish/sockets/public:
    get:
      description: get public socket list
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Get public socket list
      tags:
      - dish
  /dish/sockets/results:
    post:
      description: batch update socket's healthy state.
      produces:
      - application/json
      responses: {}
      summary: Batch update socket's healthy state.
      tags:
      - dish
  /dish/sockets/status:
    get:
      consumes:
      - application/json
      description: subscribe to dish SSE dispatcher
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.Message'
            type: array
      summary: Subscribe to dish SSE dispatcher
      tags:
      - dish
  /finance:
    get:
      description: get whole finance package content
      produces:
      - application/json
      responses: {}
      summary: Get whole finance package content
      tags:
      - finance
  /finance/accounts:
    get:
      description: get finance complete list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Account'
      summary: Get all finance accounts
      tags:
      - finance
  /finance/accounts/{key}:
    delete:
      description: delete finance account by ID
      parameters:
      - description: account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Account'
      summary: Delete finance account by ID
      tags:
      - finance
    get:
      description: get finance account by its key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Account'
      summary: Get finance account by its key
      tags:
      - finance
    post:
      description: add new finance account
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/finance.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Account'
      summary: Add new finance account
      tags:
      - finance
    put:
      description: update finance account by ID
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/finance.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Account'
      summary: Update finance account by ID
      tags:
      - finance
  /finance/accounts/owner/:key:
    get:
      description: get finance accounts by Owner key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Account'
      summary: Get finance accounts by Owner key
      tags:
      - finance
  /finance/items:
    get:
      description: get account list of items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Item'
      summary: Get all account items
      tags:
      - finance
  /finance/items/{key}:
    delete:
      description: delete account item by its ID
      parameters:
      - description: item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Item'
      summary: Delete account item by its ID
      tags:
      - finance
    get:
      description: get account item by its key
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Item'
      summary: Get account item by key
      tags:
      - finance
    post:
      description: add new account item
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/finance.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Item'
      summary: Add new account item
      tags:
      - finance
    put:
      description: update account item ba its key
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/finance.Item'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Item'
      summary: Update account item by its key
      tags:
      - finance
  /finance/items/account/:key:
    get:
      description: get account items by account ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Item'
      summary: Get account items by account ID
      tags:
      - finance
  /finance/restore:
    post:
      consumes:
      - application/json
      description: upload accounts JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload account iteme dump backup -- restores all finance accounts
      tags:
      - finance
  /finance/taxes/{owner}/{year}:
    get:
      description: do taxes by the account Owner key
      parameters:
      - description: owner key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finance.Tax'
      summary: Do taxes by the account owner Owner key
      tags:
      - finance
  /infra:
    get:
      description: get all infrastructure details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Infrastructure'
      summary: Get whole infrastructure
      tags:
      - infra
  /infra/domains:
    get:
      description: get domain list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Domain'
      summary: Get all domains
      tags:
      - infra
  /infra/domains/{key}:
    delete:
      description: delete domain by its Key
      parameters:
      - description: domain ID/Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Domain'
      summary: Delete domain by its Key
      tags:
      - infra
    get:
      description: get domain by :key param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Domain'
      summary: Get domain by Key
      tags:
      - infra
    post:
      description: add new domain
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/infra.Domain'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Domain'
      summary: Add new domain
      tags:
      - infra
    put:
      description: update domain by its Key
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/infra.Domain'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Domain'
      summary: Update domain by its Key
      tags:
      - infra
  /infra/hosts:
    get:
      description: get hosts list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Host'
      summary: Get all hosts
      tags:
      - infra
  /infra/hosts/{key}:
    delete:
      description: delete host by its Key
      parameters:
      - description: host ID/Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Host'
      summary: Delete host by its Key
      tags:
      - infra
    get:
      description: get host by :key param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Host'
      summary: Get host by Key
      tags:
      - infra
    post:
      description: add new host
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/infra.Host'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Host'
      summary: Add new host
      tags:
      - infra
    put:
      description: update host by its Key
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/infra.Host'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Host'
      summary: Update host by its Key
      tags:
      - infra
  /infra/hosts/{key}/config:
    post:
      description: update host's configuration
      parameters:
      - description: host's configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/infra.Configuration'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Host'
      summary: Upload current host configuration
      tags:
      - infra
  /infra/hosts/{key}/facts:
    post:
      description: update host's facts
      parameters:
      - description: host's facts
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/infra.Facts'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Host'
      summary: Upload current host facts
      tags:
      - infra
  /infra/hosts/{key}/vmic:
    post:
      description: add/update a VM install configuration
      parameters:
      - description: host's VMIC
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/infra.VMInstallConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Host'
      summary: Add/update a VM install configuration
      tags:
      - infra
  /infra/hosts/{key}/vmic/{vm}:
    delete:
      description: delete a VM install configuration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Host'
      summary: Delete a VM install configuration
      tags:
      - infra
  /infra/networks:
    get:
      description: get networks list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Infrastructure'
      summary: Get all networks
      tags:
      - infra
  /infra/networks/{key}:
    delete:
      description: delete network by its Key
      parameters:
      - description: network ID/Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Network'
      summary: Delete network by its Key
      tags:
      - infra
    get:
      description: get network by :key param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Network'
      summary: Get network by Key
      tags:
      - infra
    post:
      description: add new network
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/infra.Network'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Network'
      summary: Add new network
      tags:
      - infra
    put:
      description: update network by its Key
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/infra.Network'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Network'
      summary: Update network by its Key
      tags:
      - infra
  /infra/restore:
    post:
      consumes:
      - application/json
      description: restore infrastructure data model
      produces:
      - application/json
      responses: {}
      summary: Upload infrastructure JSON dump
      tags:
      - infra
  /links:
    get:
      description: get links complete list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/links.Link'
      summary: Get all links
      tags:
      - links
  /links/{key}:
    delete:
      description: delete link by its Key
      parameters:
      - description: link Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/links.Link'
      summary: Delete link by its Key
      tags:
      - links
    get:
      description: get link by its :hash param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/links.Link'
      summary: Get link by :hash
      tags:
      - links
    post:
      description: add new link to links array
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/links.Link'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/links.Link'
      summary: Add new link to links
      tags:
      - links
    put:
      description: update link by its Key
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/links.Link'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/links.Link'
      summary: Update link by its Key
      tags:
      - links
  /links/{key}/active:
    put:
      description: toggle active boolean for {hash}
      parameters:
      - description: hash
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/links.Link'
      summary: Toggle active boolean for {hash}
      tags:
      - links
  /links/restore:
    post:
      consumes:
      - application/json
      description: update links JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload links dump backup -- restore all links
      tags:
      - links
  /news/{key}:
    get:
      description: fetch and parse news for :key param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/news.Item'
      summary: Get news by user key
      tags:
      - news
  /news/sources/:
    get:
      description: get all news sources
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/news.NewsSources'
      summary: Get news source list
      tags:
      - news
  /news/sources/{key}:
    delete:
      description: delete user sources by user key
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Delete user sources by user key
      tags:
      - news
    get:
      description: get news sources by their user :key param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/news.Source'
      summary: Get news source list by User key
      tags:
      - news
    post:
      description: add new news sources by user :key param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/news.Source'
      summary: Add new user sources by user key
      tags:
      - news
    put:
      description: update news sources by user key
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/news.Source'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/news.Source'
      summary: Update news sources by user key
      tags:
      - news
  /news/sources/restore:
    post:
      consumes:
      - application/json
      description: update news sources JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload news sources dump backup -- restores all sources
      tags:
      - news
  /projects:
    get:
      description: get project list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/projects.Project'
            type: array
      summary: Get all projects
      tags:
      - projects
  /projects/{key}:
    delete:
      description: delete project by its ID
      parameters:
      - description: project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projects.Project'
      summary: Delete project by its ID
      tags:
      - projects
    get:
      description: get project details by :id route param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projects.Project'
      summary: Get project by ID
      tags:
      - projects
    post:
      description: add new project to projects list
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projects.Project'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projects.Project'
      summary: Add new project
      tags:
      - projects
    put:
      description: update project by its ID
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projects.Project'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projects.Project'
      summary: Update project by its ID
      tags:
      - projects
  /projects/restore:
    post:
      consumes:
      - application/json
      description: upload project JSON dump and restore the data model
      produces:
      - application/json
      responses: {}
      summary: Upload projects dump -- restore projects
      tags:
      - projects
  /roles:
    get:
      description: get roules complete list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/roles.Role'
            type: array
      summary: Get all roles
      tags:
      - roles
  /roles/{key}:
    delete:
      description: delete role by its Key
      parameters:
      - description: role Key
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/roles.Role'
      summary: Delete role by its Key
      tags:
      - roles
    get:
      description: get role by :key param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/roles.Role'
      summary: Get role by Key
      tags:
      - roles
    post:
      description: add new role to roles array
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/roles.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/roles.Role'
      summary: Add new role to roles array
      tags:
      - roles
    put:
      description: update role by its Key
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/roles.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/roles.Role'
      summary: Update role by its Key
      tags:
      - roles
  /roles/restore:
    post:
      consumes:
      - application/json
      description: update roles JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload roles dump backup -- restores all roles
      tags:
      - roles
  /system/restore:
    post:
      consumes:
      - application/json
      description: update systems' JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload systems dump backup -- restores all systems
      tags:
      - system
  /users:
    get:
      description: get users complete list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
      summary: Get all users
      tags:
      - users
  /users/{key}:
    delete:
      description: delete user by Key
      parameters:
      - description: user Name
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Delete user by Key
      tags:
      - users
    get:
      description: get user by their :key param
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Get user by Key
      tags:
      - users
    post:
      description: add new user to users array
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Add new user to users array
      tags:
      - users
    put:
      description: update user by Key
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Update user by Key
      tags:
      - users
  /users/{key}/active:
    put:
      description: toggle active boolean for {user}
      parameters:
      - description: user name
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Toggle active boolean for {user}
      tags:
      - users
  /users/{key}/keys/ssh:
    get:
      description: fetch :user ssh key array output in plain text
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Get User's SSH keys in plain text
      tags:
      - users
    post:
      description: add new SSH keys to :user param
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      summary: Add SSH public keys to User
      tags:
      - users
  /users/restore:
    post:
      consumes:
      - application/json
      description: update users JSON dump
      produces:
      - application/json
      responses: {}
      summary: Upload users dump backup -- restores all users
      tags:
      - users
securityDefinitions:
  apiKey:
    in: header
    name: X-Auth-Token
    type: apiKey
swagger: "2.0"
